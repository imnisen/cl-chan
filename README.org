#+OPTIONS: toc:nil
* Cl-Chan 
** Description
~cl-chan~ provides a golang like unbuffered/buffered channel.

With ~send~ or ~recv~, you can send or receive value to channel.

Also with ~select~, you can randomly listen to event from a channel.

It based on multi-threads library ~bordeaux-threads~ to act like gorotine stuff.


Note, 

This project is inspired by [[https://github.com/zkat/chanl][chanl]] and [[https://github.com/tylertreat/chan][chan]]. Lots of utils code is copy from  [[https://github.com/zkat/chanl][chanl]], such as ~queues.lisp~, ~threads.lisp~, ~utils.lisp~.

The reason I write ~cl-chan~ is that as the only useable CSP lib I find in cl world,  [[https://github.com/zkat/chanl][chanl]] test cases may cause race condition, you can refer to this [[https://github.com/zkat/chanl/issues/13][issue]]. 
It seems hard to fix it as it abstracts a lot from different channels. So I made a simple worked one.

I refer to project [[https://github.com/tylertreat/chan][chan]]. But I found the select implenmentation may have a problem ([[https://github.com/tylertreat/chan/issues/26][issue]]), So I chose the select the implementation of [[https://github.com/zkat/chanl][chanl]] .
Also, in order to add functionality of non-block send and receive, I rewrite the logic of ~send~ and ~recv~.


** Usage
~cl-chan~ provides two types channel: ~unbuffered-channel~ and ~buffered-channel~. 
#+BEGIN_SRC lisp
;; make a unbuffered channel
CL-CHAN> (defvar *c1* (make-instance 'unbuffered-channel))
*C1*


;; make a buffered channel with size 2.
CL-CHAN> (defvar *c2* (make-instance 'buffered-channel :size 2))
*C2*

;; check if channel is buffered
CL-CHAN> (channel-bufferedp *c1*)
NIL

CL-CHAN> (channel-bufferedp *c2*)
T
#+END_SRC


You can use ~send~ to send value to a channel or ~recv~ to receive value from it.
#+BEGIN_SRC 
;; return value is channel itself
CL-CHAN> (send *c2* 1)
#<BUFFERED-CHANNEL {100285CD33}>

;; first return value is value received from channel
;; second return value is channel itself
CL-CHAN> (recv *c2*)
1
#<BUFFERED-CHANNEL {100285CD33}>

;; send and receive with blockp nil
CL-CHAN> (send *c2* :blockp nil)
#<BUFFERED-CHANNEL {100285CD33}>

CL-CHAN> (recv *c2* :blockp nil)
1
#<BUFFERED-CHANNEL {100285CD33}>

#+END_SRC


Also there is a ~select~ which could be used to wait one of multi channels events to happen.
#+BEGIN_SRC 

(select
   ((recv c d)
    (format t "got ~a from c~%" d))
   ((send e val)
    (print "sent val on e~%"))
   ((recv *lots-of-channels* value channel)
    (format t "Got ~A from ~C~%" value channel))
   (otherwise
    (print "would have blocked~%")))

#+END_SRC


Create a new thread continually reading values and printing them:
#+BEGIN_SRC 
(pexec ()
   (loop (format t "~a~%" (recv *c*))))
#+END_SRC



Create a new thread that runs a function:
#+BEGIN_SRC 
(pcall #'my-function)

#+END_SRC





** Installation
Download the repo in where your quicklisp can find (such as ~~/quicklisp/local-projects~), then use ~(ql:quickload :cl-chan)~ to load.

Currently tested on sbcl and ccl, you can test as: ~(asdf:test-system :cl-chan)~


** Author

+ Nisen (imnisen@gmail.com)

** Copyright/License

Do whatever you want.

** TODOS                                                                        :noexport:
*** Add racing test for buffered channel
*** Do we need close and init of channel?
*** port other chanl rest concepts? chan.c other funcs?
*** A derived question:
how to eval code in runtime with lexcial scope variable.
Just like the before `select` version
